{"version":3,"sources":["me.png","dbss1.png","dbss2.png","dbss3.png","roboSS.png","NavBar.js","About.js","Projects.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","className","href","target","rel","activeClass","to","spy","smooth","offset","duration","About","src","require","alt","Projects","id","App","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6LAAAA,EAAOC,QAAU,IAA0B,gC,wCCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,gKCwB5BC,EApBA,WACX,OACI,yBAAKC,UAAU,UACX,yBAAKA,UAAU,WACX,4BACI,uBAAGC,KAAK,gCAAgCC,OAAO,SAASC,IAAI,uBAAsB,wBAAIH,UAAU,OAAd,WAClF,kBAAC,OAAD,CACII,YAAY,SACZC,GAAG,kBACHC,KAAK,EACLC,QAAQ,EACRC,QAAS,GACTC,SAAU,KACb,wBAAIT,UAAU,QAAd,iBCSNU,G,MAvBD,WAEV,OACI,yBAAKV,UAAU,SAEX,yBAAKA,UAAU,SACf,yBAAKA,UAAU,UACP,uDAEJ,yBAAKA,UAAU,MACX,yBAAKW,IAAKC,EAAQ,IAAaC,IAAI,aAK3C,yBAAKb,UAAU,aACX,wKAA6I,6BAAK,6BAAlJ,+ICsEDc,G,MAtFE,WACb,OACI,yBAAKd,UAAU,WAAWe,GAAG,mBACzB,yBAAKf,UAAU,YACX,yCAGJ,yBAAKA,UAAU,WACX,yBAAKA,UAAU,QACX,kDACA,yJACwG,6BADxG,qGAC2M,6BAD3M,oFAEA,6BAAM,6BACF,uBAAGC,KAAK,qJAAqJC,OAAO,SAASC,IAAI,uBAAsB,yBAAKH,UAAU,SAASa,IAAI,wBAAwBF,IAAI,+FAIvQ,yBAAKX,UAAU,eACX,yBAAKA,UAAU,QACX,yBAAKW,IAAKC,EAAQ,IAAgBC,IAAI,SAG1C,yBAAKb,UAAU,QACX,yBAAKW,IAAKC,EAAQ,IAAgBC,IAAI,SAG1C,yBAAKb,UAAU,QACX,yBAAKW,IAAKC,EAAQ,IAAgBC,IAAI,WAOlD,6BAAM,6BAAM,6BAEZ,yBAAKb,UAAU,WACX,yBAAKA,UAAU,QACX,2CACA,4DAAiC,6BAAjC,qCACsC,uBAAGC,KAAK,6CAA6CC,OAAO,SAASC,IAAI,uBAAzE,QADtC,4DACsM,6BADtM,0IAEiF,6BAAK,6BAClF,uBAAGF,KAAK,0CAA0CC,OAAO,SAASC,IAAI,uBAAtE,yBAIR,yBAAKH,UAAU,eAEX,yBAAKA,UAAU,QACX,yBAAKW,IAAKC,EAAQ,IAAiBC,IAAI,WAOnD,6BAAM,6BAAM,6BAEZ,yBAAKb,UAAU,WACX,yBAAKA,UAAU,QACX,+CACA,iFAAsD,6BAAM,6BAAK,6BAAjE,mBACgB,6BAAK,6BADrB,qEAEkE,6BAClE,6BAAK,uBAAGC,KAAK,yDAAyDC,OAAO,SAASC,IAAI,uBAArF,QAAmH,6BAAK,6BAAK,6BAHlI,uBAIoB,6BAAK,6BAJzB,wFAKqF,6BACrF,6BAAK,uBAAGF,KAAK,sDAAsDC,OAAO,SAASC,IAAI,uBAAlF,QAAgH,6BAAK,6BAAK,6BAN/H,YAOS,6BAAK,6BAPd,6DAQ0D,6BAC1D,6BAAK,uBAAGF,KAAK,kDAAkDC,OAAO,SAASC,IAAI,uBAA9E,WAOjB,6BAAK,6BACL,iDC/DOa,G,uLAVP,OACI,6BACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANMC,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.66db7b80.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/me.cac91df5.png\";","module.exports = __webpack_public_path__ + \"static/media/dbss1.5fb43e61.png\";","module.exports = __webpack_public_path__ + \"static/media/dbss2.3a210f95.png\";","module.exports = __webpack_public_path__ + \"static/media/dbss3.7e3e7b5f.png\";","module.exports = __webpack_public_path__ + \"static/media/roboSS.9d033328.png\";","import React from 'react';\r\nimport './NavBar.css'\r\nimport { Link } from \"react-scroll\";\r\n\r\nconst NavBar = () => {\r\n    return (\r\n        <div className='navbar'>\r\n            <div className='buttons'>\r\n                <ul>\r\n                    <a href=\"https://github.com/atahanszgn\" target=\"_blank\" rel=\"noopener noreferrer\"><li className=\"git\">GitHub</li></a>\r\n                    <Link\r\n                        activeClass=\"active\"\r\n                        to=\"projectsSection\"\r\n                        spy={true}\r\n                        smooth={true}\r\n                        offset={-70}\r\n                        duration={500}\r\n                    ><li className=\"prjs\">Projects</li></Link>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NavBar;","import React from 'react';\r\nimport './About.css';\r\n\r\nconst About = () => {\r\n    \r\n    return (\r\n        <div className=\"about\">\r\n\r\n            <div className=\"intro\">\r\n            <div className=\"myName\">\r\n                    <h1>Hi! I'm Atahan Sezgin.</h1>\r\n                </div>\r\n                <div className=\"pp\">\r\n                    <img src={require('./me.png')} alt=\"atahan\"></img>\r\n                </div>\r\n                \r\n            </div>\r\n\r\n            <div className=\"aboutText\">\r\n                <p>3rd year Computer Engineering student who is interested in Game Development and Design, Web Development and Mobile App Development areas. <br/><br/>Has a good knowledge of Object-Oriented Programming, experienced in solving bugs, handling difficult situations and working with teams.</p>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default About;","import React from 'react';\r\nimport './Projects.css';\r\n\r\nconst Projects = () => {\r\n    return (\r\n        <div className=\"projects\" id=\"projectsSection\">\r\n            <div className=\"pSection\">\r\n                <h1>Projects</h1>\r\n            </div>\r\n\r\n            <div className=\"project\">\r\n                <div className=\"desc\">\r\n                    <h1>Dodgeball Madness!</h1>\r\n                    <p>Dodgeball Madness!\r\n                    My first android game made with Unity and C# programming language. I used Inkscape for Vector graphics, <br />GIMP for editing the images, GameMaker-Studioâ€™s sprite editor for exporting animation sheets,<br /> LMMS for making the music, Audacity for editing sounds and Google AdMob for ads.\r\n                    <br /><br />\r\n                        <a href='https://play.google.com/store/apps/details?id=com.atahanszgn.dbmadness&pcampaignid=pcampaignidMKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1' target='_blank' rel=\"noopener noreferrer\"><img className=\"gpLogo\" alt='Get it on Google Play' src='https://play.google.com/intl/en_us/badges/static/images/badges/en_badge_web_generic.png' /></a>\r\n                    </p>\r\n                </div>\r\n\r\n                <div className=\"screenshots\">\r\n                    <div className=\"dbss\">\r\n                        <img src={require(\"./dbss1.png\")} alt=\"ss1\"></img>\r\n                    </div>\r\n\r\n                    <div className=\"dbss\">\r\n                        <img src={require(\"./dbss2.png\")} alt=\"ss2\"></img>\r\n                    </div>\r\n\r\n                    <div className=\"dbss\">\r\n                        <img src={require(\"./dbss3.png\")} alt=\"ss3\"></img>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n\r\n            <br /><br /><br />\r\n\r\n            <div className=\"project\">\r\n                <div className=\"desc\">\r\n                    <h1>Robofriends</h1>\r\n                    <p>It's my first app using React!<br />\r\n                        Fetches information of users from <a href=\"https://jsonplaceholder.typicode.com/users\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>, creates cards with that information and displays them. <br />Filters cards by name with using the given input by user.\r\n                        Also search box is static. So you can scroll down and still filter the cards!<br/><br/>\r\n                        <a href=\"http://atahanszgn.github.io/robofriends\" target=\"_blank\" rel=\"noopener noreferrer\">Click here to test!</a>\r\n                    </p>\r\n                </div>\r\n\r\n                <div className=\"screenshots\">\r\n\r\n                    <div className=\"rfss\">\r\n                        <img src={require('./roboSS.png')} alt=\"ss2\"></img>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n            </div>\r\n            <br /><br /><br />\r\n\r\n            <div className=\"project\">\r\n                <div className=\"desc\">\r\n                    <h1>School Projects</h1>\r\n                    <p>There are other projects of mine on my GitHub page.<br /><br/><br/>\r\n                    Chat Application<br/><br/>\r\n                    A peer-to-peer chat system written in Python programming language.<br/>\r\n                    <br/><a href=\"https://github.com/atahanszgn/CMP2204-Chat-Application\" target=\"_blank\" rel=\"noopener noreferrer\">Link</a><br/><br/><br/>\r\n                    Frequent Word Finder<br/><br/>\r\n                    Prints the top 10 frequent words from a csv file.Written in C++ programming language.<br/>\r\n                    <br/><a href=\"https://github.com/atahanszgn/CMP2003-frequentWords\" target=\"_blank\" rel=\"noopener noreferrer\">Link</a><br/><br/><br/>\r\n                    Maze Game<br/><br/>\r\n                    A command prompt game written in C++ programming language.<br/>\r\n                    <br/><a href=\"https://github.com/atahanszgn/CMP1001-Maze-Game\" target=\"_blank\" rel=\"noopener noreferrer\">Link</a>\r\n                    </p>\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n        <br/><br/>\r\n        <p>Made with React</p>\r\n\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Projects;","import React from 'react';\r\nimport NavBar from './NavBar';\r\nimport About from './About';\r\nimport Projects from './Projects';\r\nimport './App.css';\r\n\r\nclass App extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n            <NavBar/>\r\n            <About/>\r\n            <Projects/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}